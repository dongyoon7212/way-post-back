<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.waypost.waypost.mapper.UserMapper">

    <resultMap id="UserResultMap" type="com.waypost.waypost.entity.User">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="username" column="username" />
        <result property="profileImg" column="profile_img" />
        <result property="introduce" column="introduce" />
        <result property="regDt" column="reg_dt" />
        <result property="updDt" column="upd_dt" />
        <result property="dctvdDt" column="dctvd_dt" />
        <result property="isAccountNonExpired" column="account_expired" />
        <result property="isAccountNonLocked" column="account_locked" />
        <result property="isCredentialsNonExpired" column="credentials_expired" />
        <result property="isEnabled" column="account_enabled" />
        <collection property="userRoles" resultMap="userRoleResultMap" />
    </resultMap>

    <resultMap id="userRoleResultMap" type="com.waypost.waypost.entity.UserRole">
        <id property="userRoleId" column="user_role_id" />
        <result property="userId" column="user_id" />
        <result property="roleId" column="role_id" />
        <association property="role" resultMap="roleResultMap" />
    </resultMap>

    <resultMap id="roleResultMap" type="com.waypost.waypost.entity.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
    </resultMap>

    <resultMap id="FindByUserIdRespDto" type="com.waypost.waypost.dto.account.FindByUserIdRespDto">
        <result property="isFollowed" column="is_followed" />
        <result property="followerCount" column="follower_count" />
        <result property="followingCount" column="following_count" />
        <association property="user" resultMap="UserResultMap" />
    </resultMap>

    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into user_tb
        values (0, #{email}, #{password}, #{username}, "https://firebasestorage.googleapis.com/v0/b/way-post-9f21b.firebasestorage.app/o/user-profile-img%2FprofileImg.jpg?alt=media&amp;token=f5cbbbf0-a382-4699-8248-13a948df38cf", "", now(), now(), 1, 1, 1, 1, Null, Null)
    </insert>

    <select id="findByEmail" parameterType="String" resultMap="UserResultMap">
        select
            ut.*,
            urt.*,
            rt.*
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            email = #{email};
    </select>

    <select id="findByUsername" parameterType="String" resultMap="UserResultMap">
        select
            *
        from
            user_tb
        where
            username = #{username}
    </select>

    <select id="findByUserId" parameterType="Integer" resultMap="FindByUserIdRespDto">
        select
            user_id,
            email,
            username,
            profile_img,
            introduce,
            reg_dt,
            upd_dt,
            dctvd_dt,
            account_expired,
            account_locked,
            credentials_expired,
            account_enabled,
            <!-- 로그인 했을 때만 팔로우 여부 계산 -->
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS (
                    SELECT 1
                    FROM user_follow_tb uf
                    WHERE uf.follower_id = #{currentUserId}
                    AND uf.followee_id = #{userId}
                    )
                    THEN 1
                    ELSE 0
                    END
                </when>
                <otherwise>
                    0
                </otherwise>
            </choose>
            AS is_followed,
            ( SELECT COUNT(*)
            FROM user_follow_tb uf2
            WHERE uf2.followee_id = user_id
            ) AS follower_count,
            <!-- 팔로잉 수 -->
            ( SELECT COUNT(*)
            FROM user_follow_tb uf3
            WHERE uf3.follower_id = user_id
            ) AS following_count
        from
            user_tb
        where
            user_id = #{userId}
    </select>

    <update id="editProfileImg" >
        update
            user_tb
        set
            profile_img = #{profileImg},
            upd_dt = now()
        where
            user_id = #{userId}
    </update>

    <update id="editIntroduce">
        update
            user_tb
        set
            introduce = #{introduce},
            upd_dt = now()
        where
            user_id = #{currentUserId}
    </update>

    <update id="deactivateAccount">
        update
            user_tb
        set
            account_enabled = 0,
            dctvd_dt = now(),
            upd_dt = now()
        where
            user_id = #{userId}
    </update>

    <update id="activateAccount">
        update
            user_tb
        set
            account_enabled = 1,
            dctvd_dt = NULL,
            upd_dt = now()
        where
            user_id = #{userId}
    </update>

    <select id="getFollowingList" resultMap="UserResultMap">
        SELECT
            u.user_id,
            u.username,
            u.profile_img,
            u.introduce
        FROM
            user_follow_tb f
            JOIN user_tb u ON f.followee_id = u.user_id
        WHERE
            f.follower_id = #{userId}
    </select>

    <select id="getFollowerList" resultMap="UserResultMap">
        SELECT
            u.user_id,
            u.username,
            u.profile_img,
            u.introduce
        FROM
            user_follow_tb f
            JOIN user_tb u ON f.follower_id = u.user_id
        WHERE
            f.followee_id = #{userId}
    </select>



</mapper>