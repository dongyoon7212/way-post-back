<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.waypost.waypost.mapper.PhotoPostMapper">

    <resultMap id="PhotoPostResultMap" type="com.waypost.waypost.entity.PhotoPost">
        <id property="photoPostId" column="photo_post_id" />
        <result property="userId" column="user_id" />
        <result property="postText" column="post_text" />
        <result property="imgUrl" column="img_url" />
        <result property="cameraModel" column="camera_model" />
        <result property="locationAddress" column="location_address" />
        <result property="isLiked" column="is_liked" />
        <result property="likeCount" column="like_count" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="location" column="location" typeHandler="com.waypost.waypost.mybatis.PointTypeHandler" />
        <result property="regDt" column="reg_dt" />
        <result property="updDt" column="upd_dt" />
        <association property="user" javaType="com.waypost.waypost.entity.User">
            <result property="email" column="email" />
            <result property="username" column="username" />
            <result property="profileImg" column="profile_img" />
        </association>
        <collection
                property="comments"
                ofType="com.waypost.waypost.entity.Comment"
                column="photo_post_id"
                select="com.waypost.waypost.mapper.PhotoPostMapper.getCommentsByPostIdAndUser"
        />
    </resultMap>

    <resultMap id="CommentResultMap" type="com.waypost.waypost.entity.Comment">
        <id     property="commentId" column="comment_id"/>
        <result property="photoPostId" column="photo_post_id"/>
        <result property="userId"      column="user_id"/>
        <result property="content"     column="content"/>
        <result property="regDt"       column="reg_dt"/>
        <result property="updDt"       column="upd_dt"/>
        <association property="user" javaType="com.waypost.waypost.entity.User">
            <id     property="userId"     column="c_user_id"/>
            <result property="username"   column="c_username"/>
            <result property="profileImg" column="c_profile_img"/>
        </association>
    </resultMap>

    <insert id="uploadPhotoPost" >
        insert into photo_post_tb
        values (
                0,
                #{userId},
                #{postText},
                #{imgUrl},
                #{cameraModel},
                #{locationAddress},
                #{latitude},
                #{longitude},
                ST_GeomFromText(CONCAT('POINT(', #{longitude}, ' ', #{latitude}, ')')),
                NOW(),
                NOW()
        )
    </insert>

    <select id="getPhotoPostList" resultMap="PhotoPostResultMap">
        select
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS(
                    SELECT 1
                    FROM photo_post_like_tb plt
                    WHERE plt.photo_post_id = p.photo_post_id
                    AND plt.user_id      = #{currentUserId}
                    ) THEN 1
                    ELSE 0
                    END AS is_liked,
                </when>
                <otherwise>
                    0 AS is_liked,
                </otherwise>
            </choose>
            (
            SELECT COUNT(*)
            FROM photo_post_like_tb pl
            WHERE pl.photo_post_id = p.photo_post_id
            ) AS like_count,
            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt,
            u.email,
            u.username,
            u.profile_img,
            c.comment_id,
            c.photo_post_id,
            c.user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            cu.username,
            cu.profile_img
        from
            photo_post_tb p
            left join user_tb u on p.user_id = u.user_id
            left join comment_tb c on p.photo_post_id = c.photo_post_id
            left join user_tb cu on c.user_id = cu.user_id
        where
            p.latitude BETWEEN #{getPhotoPostListReqDto.minLat} and #{getPhotoPostListReqDto.maxLat}
            and p.longitude BETWEEN #{getPhotoPostListReqDto.minLng} and #{getPhotoPostListReqDto.maxLng}
    </select>

    <select id="getPhotoPostListByUserId" resultType="map" resultMap="PhotoPostResultMap">
        select
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS(
                    SELECT 1
                    FROM photo_post_like_tb plt
                    WHERE plt.photo_post_id = p.photo_post_id
                    AND plt.user_id      = #{currentUserId}
                    ) THEN 1
                    ELSE 0
                    END AS is_liked,
                </when>
                <otherwise>
                    0 AS is_liked,
                </otherwise>
            </choose>
            (
            SELECT COUNT(*)
            FROM photo_post_like_tb pl
            WHERE pl.photo_post_id = p.photo_post_id
            ) AS like_count,
            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt,
            u.email,
            u.username,
            u.profile_img,
            c.comment_id,
            c.photo_post_id,
            c.user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            cu.username,
            cu.profile_img
        from
            photo_post_tb p
            left join user_tb u on p.user_id = u.user_id
            left join comment_tb c on p.photo_post_id = c.photo_post_id
            left join user_tb cu on c.user_id = cu.user_id
        where
            p.user_id = #{userId}
        order by
            p.reg_dt DESC
    </select>

    <insert id="addComment" >
        insert into comment_tb
        values (
            0,
            #{photoPostId},
            #{userId},
            #{content},
            now(),
            now()
        )
    </insert>

    <select id="getCommentsByPostIdAndUser" resultMap="CommentResultMap" parameterType="int">
        SELECT
            c.comment_id,
            c.photo_post_id,
            c.user_id     AS c_user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            u.username    AS c_username,
            u.profile_img AS c_profile_img
        FROM
            comment_tb c
            JOIN user_tb u ON c.user_id = u.user_id
        WHERE
            c.photo_post_id = #{photoPostId}
        ORDER BY
            c.reg_dt ASC
    </select>

    <delete id="removePostByPhotoPostId" parameterType="int" >
        DELETE FROM
            photo_post_tb
        WHERE
            photo_post_id = #{photoPostId}
    </delete>

    <select id="getHotPhotoPostList" resultMap="PhotoPostResultMap">
        SELECT
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,
            p.is_liked,
            p.like_count,
            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt,
            u.email,
            u.username,
            u.profile_img,
            c.comment_id,
            c.photo_post_id,
            c.user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            cu.username,
            cu.profile_img
            FROM (
            <!-- 1) 좋아요 순으로 정렬한 상위 10개 게시물만 먼저 추출 -->
            SELECT
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,

            <!-- 로그인했다면 내가 좋아요했는지 -->
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS(
                    SELECT 1
                    FROM photo_post_like_tb plt
                    WHERE plt.photo_post_id = p.photo_post_id
                    AND plt.user_id      = #{currentUserId}
                    ) THEN 1
                    ELSE 0
                    END
                </when>
                <otherwise>
                    0
                </otherwise>
            </choose>
            AS is_liked,

            <!-- 게시물별 전체 좋아요 개수 -->
            (
                SELECT COUNT(*)
                FROM photo_post_like_tb pl
                WHERE pl.photo_post_id = p.photo_post_id
            )
            AS like_count,

            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt
        FROM photo_post_tb p
        ORDER BY like_count DESC
        LIMIT 10
        ) p
        <!-- 2) 위에서 뽑은 10개 게시물에 댓글·유저 정보 LEFT JOIN -->
        LEFT JOIN user_tb    u  ON p.user_id       = u.user_id
        LEFT JOIN comment_tb c  ON p.photo_post_id = c.photo_post_id
        LEFT JOIN user_tb    cu ON c.user_id       = cu.user_id
    </select>

    <select id="getRecentPhotoPostList" resultMap="PhotoPostResultMap">
        SELECT
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,

            <!-- 로그인 했을 때만 나의 좋아요 여부 계산 -->
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS(
                    SELECT 1
                    FROM photo_post_like_tb plt
                    WHERE plt.photo_post_id = p.photo_post_id
                    AND plt.user_id      = #{currentUserId}
                    ) THEN 1
                    ELSE 0
                    END AS is_liked,
                </when>
                <otherwise>
                    0 AS is_liked,
                </otherwise>
            </choose>

            <!-- 게시물별 전체 좋아요 개수 -->
            (
                SELECT COUNT(*)
                FROM photo_post_like_tb pl
                WHERE pl.photo_post_id = p.photo_post_id
            ) AS like_count,

            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt,
            u.email,
            u.username,
            u.profile_img,
            c.comment_id,
            c.photo_post_id,
            c.user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            cu.username,
            cu.profile_img
        FROM (
            SELECT
            photo_post_id,
            user_id,
            post_text,
            img_url,
            camera_model,
            location_address,
            latitude,
            longitude,
            reg_dt,
            upd_dt
            FROM photo_post_tb
            ORDER BY reg_dt DESC
            LIMIT 10
        ) p

        LEFT JOIN user_tb      u  ON p.user_id       = u.user_id
        LEFT JOIN comment_tb   c  ON p.photo_post_id = c.photo_post_id
        LEFT JOIN user_tb      cu ON c.user_id       = cu.user_id
    </select>

    <select id="getPhotoPostListByPosition" resultMap="PhotoPostResultMap">
        select
            p.photo_post_id,
            p.user_id,
            p.post_text,
            p.img_url,
            p.camera_model,
            p.location_address,
            <choose>
                <when test="currentUserId != null">
                    CASE
                    WHEN EXISTS(
                    SELECT 1
                    FROM photo_post_like_tb plt
                    WHERE plt.photo_post_id = p.photo_post_id
                    AND plt.user_id      = #{currentUserId}
                    ) THEN 1
                    ELSE 0
                    END AS is_liked,
                </when>
                <otherwise>
                    0 AS is_liked,
                </otherwise>
            </choose>
            (
                SELECT COUNT(*)
                FROM photo_post_like_tb pl
                WHERE pl.photo_post_id = p.photo_post_id
            ) AS like_count,
            p.latitude,
            p.longitude,
            p.reg_dt,
            p.upd_dt,
            u.email,
            u.username,
            u.profile_img,
            c.comment_id,
            c.photo_post_id,
            c.user_id,
            c.content,
            c.reg_dt,
            c.upd_dt,
            cu.username,
            cu.profile_img
        from
            photo_post_tb p
            left join user_tb u on p.user_id = u.user_id
            left join comment_tb c on p.photo_post_id = c.photo_post_id
            left join user_tb cu on c.user_id = cu.user_id
        where
            p.latitude = #{getPhotoPostListByPositionReqDto.latitude} and
            p.longitude = #{getPhotoPostListByPositionReqDto.longitude}
    </select>
</mapper>